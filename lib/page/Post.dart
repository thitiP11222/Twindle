import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:twindle_app/main.dart';
import 'package:twindle_app/page/Post%20Success.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:twindle_app/page/home.dart';

void main() {
  runApp(const Post());
}

class Post extends StatefulWidget {
  
  const Post({super.key});
  

  @override
  _PostState createState() => _PostState();
}

class _PostState extends State<Post> {
  File? _image;
  String? userId;

@override
void initState() {
  super.initState();
  loadUserId();
}

Future<void> loadUserId() async {
  final prefs = await SharedPreferences.getInstance();
  final loadedId = prefs.getString('user_id');
  setState(() {
    userId = loadedId;
  });
  print("‚úÖ Loaded user_id: $userId");
}

  final nameController = TextEditingController();
  final brandController = TextEditingController();
  final categoryController = TextEditingController();
  final descriptionController = TextEditingController();
  final conditionController = TextEditingController();
  final priceController = TextEditingController();
  final rent3Controller = TextEditingController();
  final rent5Controller = TextEditingController();

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(
  source: ImageSource.gallery,
  preferredCameraDevice: CameraDevice.rear,
  imageQuality: 85, // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏†‡∏≤‡∏û
);

if (pickedFile != null) {
  final ext = pickedFile.path.split('.').last.toLowerCase();
  if (ext != 'jpg' && ext != 'jpeg' && ext != 'png') {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .jpg ‡∏´‡∏£‡∏∑‡∏≠ .png ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"),
    ));
    return;
  }

  setState(() {
    _image = File(pickedFile.path);
  });
}
  }

  Future<void> submitProduct() async {
  final uri = Uri.parse('http://10.0.2.2:5000/add-product');
  final request = http.MultipartRequest('POST', uri);

  // ‚úÖ Fields ‡∏ó‡∏µ‡πà backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  request.fields['product_name'] = nameController.text;
  request.fields['description'] = descriptionController.text;
  request.fields['price'] = priceController.text;
  request.fields['qualityStatus'] = conditionController.text ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' ;
  request.fields['category_id'] = '1';
  request.fields['brand'] = brandController.text ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  request.fields['category_name'] = categoryController.text;
  request.fields['user_id'] = userId ?? '';
print("‚úÖ Submitting with user_id: $userId");
  final prefs = await SharedPreferences.getInstance();
print("üì¶ Shared user_id: ${prefs.getString('user_id')}");





  // ‚úÖ Image file
  if (_image != null) {
    final imageFile = await http.MultipartFile.fromPath('image', _image!.path);
    request.files.add(imageFile);
  }

  try {
    final streamedResponse = await request.send();
    final response = await http.Response.fromStream(streamedResponse);

    if (response.statusCode == 200) {
      print("‚úÖ Upload Success: ${response.body}");
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => Postsuccess()),
      );
    } else {
      print("‚ùå Upload Failed: ${response.statusCode} - ${response.body}");
    }
  } catch (e) {
    print("‚ùå Upload error: $e");
  }
}


  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(fontFamily: 'Kanit'),
      home: Scaffold(
        backgroundColor: Colors.white,
        body: SafeArea(
          child: ListView(
            padding: const EdgeInsets.symmetric(vertical: 20),
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 25),
                child: Row(
                  children: [
                    IconButton(
                      icon: const Icon(Icons.arrow_back, size: 30, color: Colors.black),
                      onPressed: () => Navigator.of(context).pop(0),
                    ),
                    const Spacer(),
                    const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà', style: TextStyle(fontSize: 22)),
                    const Spacer(),
                  ],
                ),
              ),
              const SizedBox(height: 30),
              buildSectionTitle('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
              buildTextInputField('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤*', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', nameController),
              buildTextInputField('‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤*', '‡πÄ‡∏ä‡πà‡∏ô Zara, Nike, Uniqlo', brandController),
              buildTextInputField('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤, ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤, ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤', categoryController),
              buildSectionTitle('‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤*'),
              buildImagePicker(),
              const SizedBox(height: 10),
              const Padding(
                padding: EdgeInsets.only(left: 50),
                child: Text('*‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1-3 ‡∏£‡∏π‡∏õ', style: TextStyle(fontSize: 10, color: Color(0x7B00FF))),
              ),
              const SizedBox(height: 20),
              buildSectionTitle('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'),
              buildTextInputField('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤*', '‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', descriptionController),
              buildTextInputField('‡∏™‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤*', '‡πÉ‡∏´‡∏°‡πà / ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á / ‡∏°‡∏µ‡∏ï‡∏≥‡∏´‡∏ô‡∏¥', conditionController),
              buildTextInputField('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 200 ‡∏ø', priceController),
              const Padding(
                padding: EdgeInsets.only(left: 50, top: 2),
                child: Text('*‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≤‡∏î', style: TextStyle(fontSize: 10, color: Colors.grey)),
              ),
              const SizedBox(height: 30),
              buildSectionTitle('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤'),
              buildRentalTextField('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ 3 ‡∏ß‡∏±‡∏ô*', '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 370 ‡∏ø', '3 ‡∏ß‡∏±‡∏ô', rent3Controller),
              const SizedBox(height: 10),
              buildRentalTextField('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ 5 ‡∏ß‡∏±‡∏ô*', '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 570 ‡∏ø', '5 ‡∏ß‡∏±‡∏ô', rent5Controller),
              const Padding(
                padding: EdgeInsets.only(left: 50, top: 2),
                child: Text('*‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏ä‡πà‡∏≤', style: TextStyle(fontSize: 10, color: Colors.grey)),
              ),
              const SizedBox(height: 30),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 50),
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color.fromARGB(255, 198, 255, 235),
                    padding: const EdgeInsets.symmetric(vertical: 15),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                  ),
                  onPressed: submitProduct,
                  child: const Text('‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', style: TextStyle(fontSize: 18, color: Colors.black, fontWeight: FontWeight.w700)),
                ),
              ),
              const SizedBox(height: 30),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildSectionTitle(String title) => Padding(
    padding: const EdgeInsets.only(left: 50, bottom: 15),
    child: Text(title, style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 20)),
  );

  Widget buildTextInputField(String label, String placeholder, TextEditingController controller) => Padding(
    padding: const EdgeInsets.only(left: 50, bottom: 15),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: const TextStyle(fontSize: 15)),
        const SizedBox(height: 10),
        SizedBox(
          width: 300,
          height: 40,
          child: TextField(
            controller: controller,
            decoration: InputDecoration(
              border: OutlineInputBorder(),
              labelText: placeholder,
              filled: true,
              fillColor: Colors.white,
            ),
          ),
        ),
      ],
    ),
  );

  Widget buildRentalTextField(String label, String placeholder, String duration, TextEditingController controller) => Padding(
    padding: const EdgeInsets.symmetric(horizontal: 50),
    child: Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(label, style: const TextStyle(fontSize: 15)),
              const SizedBox(height: 5),
              SizedBox(
                width: 300,
                height: 40,
                child: TextField(
                  controller: controller,
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(
                    border: OutlineInputBorder(),
                    labelText: placeholder,
                    filled: true,
                    fillColor: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(width: 10),
        Text(duration, style: const TextStyle(fontSize: 16)),
      ],
    ),
  );

  Widget buildImagePicker() => Padding(
    padding: const EdgeInsets.symmetric(horizontal: 45),
    child: GestureDetector(
      onTap: _pickImage,
      child: Container(
        width: 300,
        height: 150,
        decoration: BoxDecoration(
          border: Border.all(color: Colors.black),
          borderRadius: BorderRadius.circular(10),
        ),
        child: _image == null
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: const [
                  Icon(Icons.add_circle_outline, size: 40, color: Colors.purple),
                  SizedBox(height: 5),
                  Text('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', style: TextStyle(fontSize: 14)),
                ],
              )
            : ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.file(_image!, width: 300, height: 150, fit: BoxFit.cover),
              ),
      ),
    ),
  );
}
